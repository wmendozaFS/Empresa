Perfecto, ahora que tenemos los modelos claros, vamos a implementar los **cálculos para generar la factura a partir de los pedidos**.

Dada la estructura de tus modelos, especialmente la relación uno a uno entre `Pedido` y `Producto` (lo que implica que cada `Pedido` es para un solo tipo de producto), y la necesidad de una tabla `FacturaDetalle` para listar los productos en una factura, propongo la siguiente lógica.

-----

### Ajustes Necesarios en tu Modelo `Pedido`

Tu modelo `Pedido` actual solo tiene un `producto`. Para que un pedido tenga sentido para una factura, necesita también una **cantidad** de ese producto. Sin una cantidad, no podemos calcular un importe.

Aquí te muestro cómo debería verse tu modelo `Pedido` con el campo `cantidad` y un `@property` para calcular su subtotal:

```python
# gestion_empresa/models.py

# ... (tus modelos Cliente, Proveedor, Producto existentes) ...

# Modelo para Pedidos (modificado para incluir 'cantidad')
class Pedido(models.Model):
    id_pedido = models.AutoField(primary_key=True, verbose_name="ID del Pedido")
    producto = models.ForeignKey(Producto, on_delete=models.CASCADE,
                                 db_column='Codigo', verbose_name="Producto")
    cliente = models.ForeignKey(Cliente, on_delete=models.CASCADE,
                                db_column='ID_Cliente', verbose_name="Cliente")
    fecha = models.DateField(verbose_name="Fecha del Pedido")
    cantidad = models.IntegerField(verbose_name="Cantidad del Producto") # <-- ¡Añade esta línea!

    class Meta:
        verbose_name = "Pedido"
        verbose_name_plural = "Pedidos"
        db_table = 'Pedidos'

    def __str__(self):
        return f"Pedido {self.id_pedido} - {self.cliente.NombreCliente} ({self.producto.descripcion})"

    @property
    def subtotal(self):
        """Calcula el subtotal para esta línea de pedido."""
        # Se asume que el precio del producto es el actual.
        # Para mayor robustez, el precio debería guardarse en el Pedido
        # en el momento de su creación, como se hace en FacturaDetalle.
        return self.cantidad * self.producto.precio

# ... (tus modelos Factura y FacturaDetalle existentes) ...
```

-----

### Pasos a seguir

1.  **Actualiza tu `models.py`:** Asegúrate de que tu modelo `Pedido` tenga el campo `cantidad` como se muestra arriba.
2.  **Ejecuta las migraciones:**
    ```bash
    python manage.py makemigrations gestion_empresa
    python manage.py migrate gestion_empresa
    ```
    Django te preguntará cómo quieres manejar el nuevo campo `cantidad` en los pedidos existentes (si los tienes). Si no tienes datos importantes, la opción por defecto (añadir un valor predeterminado) suele ser suficiente.

-----

### Lógica para Generar la Factura con Cálculos

Ahora, crearemos una función que tomará un `id_pedido` (o un `Pedido` completo) y generará una `Factura` y sus correspondientes `FacturaDetalle`. Ten en cuenta que, con tu diseño actual, **cada `Pedido` es para un solo producto con una cantidad específica, lo que significa que cada `Pedido` se convertirá en una `Factura` con un solo `FacturaDetalle`**.

```python
# gestion_empresa/views.py (o un nuevo archivo como gestion_empresa/services.py)
from django.shortcuts import get_object_or_404
from django.db import transaction
import datetime

# Asegúrate de que todos tus modelos estén importados correctamente
from .models import Pedido, Factura, FacturaDetalle, Producto, Cliente

@transaction.atomic # Asegura que la operación sea atómica: o se completa todo o no se hace nada.
def generar_factura_desde_pedido(pedido_id: int) -> Factura:
    """
    Genera una Factura y su FacturaDetalle a partir de un Pedido.
    Cada Pedido genera una única Factura con un único detalle.
    """
    pedido = get_object_or_404(Pedido, pk=pedido_id)

    # Validaciones previas (opcionales pero recomendadas)
    # Por ejemplo, si ya existe una factura vinculada a este pedido.
    # En tu diseño actual, Factura no tiene un ForeignKey a Pedido,
    # así que no podemos buscar una factura por el pedido directamente.
    # Podrías añadir un OneToOneField en Factura si cada pedido siempre tiene una factura.
    # Si no, deberías manejar si un pedido ya fue facturado de otra manera (ej. un campo de estado en Pedido).

    # Generar el número de factura.
    # Asumes que 'num' es la clave primaria IntegerField en Factura y quieres el siguiente número secuencial.
    # En un entorno de producción, este método de generación de números de factura
    # puede tener problemas de concurrencia. Considera usar un AutoField en 'num'
    # o un sistema más robusto para generar números únicos.
    last_factura = Factura.objects.order_by('-num').first()
    next_factura_num = (last_factura.num + 1) if last_factura else 1

    # Crear la cabecera de la Factura
    factura = Factura.objects.create(
        num=next_factura_num,
        fecha=datetime.date.today(), # La fecha de la factura puede ser la de hoy
        importe=0.00, # Se actualizará después de crear el detalle
        cliente=pedido.cliente # Asociar la factura al cliente del pedido
    )

    # Crear la línea de detalle de la Factura
    # Usamos el precio del producto en el momento de la creación del pedido (si lo hubieras guardado allí)
    # o el precio actual del producto. Para mayor precisión, el precio debería ser el del momento del pedido.
    # Tu modelo `FacturaDetalle` ya tiene `precio_unitario`, lo cual es excelente.

    # Calcular el subtotal del pedido para la factura
    subtotal_factura = pedido.cantidad * pedido.producto.precio

    FacturaDetalle.objects.create(
        factura=factura,
        producto=pedido.producto,
        cantidad=pedido.cantidad,
        precio_unitario=pedido.producto.precio # Captura el precio actual del producto
                                              # Si el precio del pedido fuera diferente,
                                              # necesitarías un campo 'precio_unitario' en Pedido.
    )

    # Actualizar el importe total de la Factura
    factura.importe = subtotal_factura
    factura.save()

    # Opcional: Marcar el pedido como facturado (añadiendo un campo 'estado' a tu modelo Pedido)
    # pedido.estado = 'facturado'
    # pedido.save()

    print(f"Factura {factura.num} generada para Pedido {pedido.id_pedido}. Total: {factura.importe}")
    return factura

# --- Ejemplo de cómo integrar esto en una vista de Django para una API REST o un formulario ---
from django.http import JsonResponse
from django.views.decorators.http import require_POST # Para aceptar solo solicitudes POST

@require_POST
def generar_factura_view(request, pedido_id):
    """
    Vista para generar una factura a partir de un ID de pedido.
    Acepta solo solicitudes POST.
    """
    try:
        factura_generada = generar_factura_desde_pedido(pedido_id)
        return JsonResponse({
            'status': 'success',
            'message': f'Factura {factura_generada.num} creada exitosamente.',
            'factura_num': factura_generada.num,
            'fecha_emision': factura_generada.fecha.isoformat(),
            'importe_total': str(factura_generada.importe) # Convierte Decimal a string para JSON
        })
    except Pedido.DoesNotExist:
        return JsonResponse({'status': 'error', 'message': 'Pedido no encontrado.'}, status=404)
    except Exception as e:
        # En un entorno real, aquí deberías loguear el error completo.
        print(f"Error al generar factura: {e}")
        return JsonResponse({'status': 'error', 'message': f'Error interno del servidor: {e}'}, status=500)

```

-----

### Configuración de URL (gestion\_empresa/urls.py)

Para poder acceder a esta vista, necesitarás una URL:

```python
# gestion_empresa/urls.py
from django.urls import path
from . import views # Asegúrate de que 'views' se refiere a tu archivo views.py

urlpatterns = [
    # ... otras URLs de tu app ...
    path('generar-factura/<int:pedido_id>/', views.generar_factura_view, name='generar_factura'),
]
```

Asegúrate de que este `gestion_empresa/urls.py` esté incluido en el `urls.py` principal de tu proyecto.

-----

### Cómo Probarlo

1.  Asegúrate de haber corrido `makemigrations` y `migrate` después de añadir `cantidad` a tu modelo `Pedido`.
2.  Crea algunos `Cliente` y `Producto` en tu base de datos (puedes usar el admin de Django).
3.  Crea un `Pedido` a través del admin o la shell, asegurándote de asignarle un `producto`, un `cliente` y una `cantidad`.
    ```python
    # En python manage.py shell
    from gestion_empresa.models import Cliente, Producto, Pedido
    import datetime

    cliente_ejemplo = Cliente.objects.get(pk=1) # O Cliente.objects.create(NombreCliente='Juan', celular='12345678')
    producto_ejemplo = Producto.objects.get(pk=1) # O Producto.objects.create(codigo=..., descripcion='Laptop', precio=1200.00, id_proveedor=...)

    # Crea un pedido con cantidad
    pedido_nuevo = Pedido.objects.create(
        producto=producto_ejemplo,
        cliente=cliente_ejemplo,
        fecha=datetime.date.today(),
        cantidad=2 # Pedido de 2 unidades de ese producto
    )
    print(f"Pedido creado: {pedido_nuevo.id_pedido}")
    ```
4.  Inicia tu servidor de desarrollo: `python manage.py runserver`
5.  Puedes probar la generación de la factura enviando una solicitud POST (usando Postman, Insomnia, o incluso un simple formulario HTML) a la URL `/generar-factura/ID_DEL_PEDIDO/`. Por ejemplo, `http://127.0.0.1:8000/generar-factura/1/` si el `id_pedido` es 1.

Con estos pasos, ya tienes la lógica para calcular y generar tus facturas a partir de tus pedidos existentes.